/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.bd.kb.httpclient.model;

import java.util.Objects;

import com.synopsys.kb.httpclient.model.VulnerabilitySource;

/**
 * Related vulnerability representation.
 * 
 * @author skatzman
 */
public class RelatedVulnerability {
    private final VulnerabilitySource source;

    private final String id;

    private final boolean isAssociated;

    /**
     * Constructs the related vulnerability.
     * 
     * @param source
     *            The vulnerability source of the related vulnerability.
     * @param id
     *            The vulnerability id of the related vulnerability.
     * @param isAssociated
     *            The related vulnerability is associated to the same entity (component version or component variant)
     *            when true and not associated otherwise.
     */
    public RelatedVulnerability(VulnerabilitySource source, String id, boolean isAssociated) {
        this.source = Objects.requireNonNull(source, "Source must be initialized.");
        this.id = Objects.requireNonNull(id, "Id must be initialized.");
        this.isAssociated = isAssociated;
    }

    public VulnerabilitySource getSource() {
        return source;
    }

    public String getId() {
        return id;
    }

    public boolean isAssociated() {
        return isAssociated;
    }

    @Override
    public int hashCode() {
        return Objects.hash(getSource(), getId(), isAssociated());
    }

    @Override
    public boolean equals(Object otherObject) {
        if (this == otherObject) {
            return true;
        } else if (otherObject instanceof RelatedVulnerability) {
            RelatedVulnerability otherRelatedVulnerability = (RelatedVulnerability) otherObject;

            return Objects.equals(getSource(), otherRelatedVulnerability.getSource())
                    && Objects.equals(getId(), otherRelatedVulnerability.getId())
                    && Objects.equals(isAssociated(), otherRelatedVulnerability.isAssociated());
        }

        return false;
    }
}
