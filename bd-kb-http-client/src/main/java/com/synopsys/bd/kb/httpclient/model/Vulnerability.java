/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.bd.kb.httpclient.model;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import javax.annotation.Nullable;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.synopsys.kb.httpclient.model.BdsaVulnerability;
import com.synopsys.kb.httpclient.model.CveVulnerability;
import com.synopsys.kb.httpclient.model.Cvss2Score;
import com.synopsys.kb.httpclient.model.Cvss3Score;
import com.synopsys.kb.httpclient.model.VulnerabilityReference;
import com.synopsys.kb.httpclient.model.VulnerabilitySource;
import com.synopsys.kb.httpclient.model.VulnerabilityStatus;

/**
 * Generic representation of a vulnerability.
 * 
 * @author skatzman
 */
public class Vulnerability {
    // Vulnerability id (CVE-2023-0001, BDSA-2023-0001, etc.)
    private final String id;

    private final VulnerabilitySource source;

    @Nullable
    private final String title;

    private final String description;

    @Nullable
    private final String technicalDescription;

    @Nullable
    private final String workaround;

    @Nullable
    private final String solution;

    private final OffsetDateTime publishedDate;

    private final OffsetDateTime lastModifiedDate;

    @Nullable
    private final OffsetDateTime disclosureDate;

    @Nullable
    private final OffsetDateTime vendorFixDate;

    @Nullable
    private final OffsetDateTime exploitAvailableDate;

    @Nullable
    private final Cvss2Score cvss2Score;

    @Nullable
    private final Cvss3Score cvss3Score;

    private final List<VulnerabilityReference> references;

    private final VulnerabilityStatus status;

    private final Set<String> tags;

    @Nullable
    private final OverallScore overallScore;

    @Nullable
    private final RelatedVulnerability relatedVulnerability;

    public Vulnerability(String id,
            VulnerabilitySource source,
            @Nullable String title,
            String description,
            String technicalDescription,
            String workaround,
            String solution,
            OffsetDateTime publishedDate,
            OffsetDateTime lastModifiedDate,
            OffsetDateTime disclosureDate,
            OffsetDateTime vendorFixDate,
            OffsetDateTime exploitAvailableDate,
            Cvss2Score cvss2Score,
            Cvss3Score cvss3Score,
            List<VulnerabilityReference> references,
            VulnerabilityStatus status,
            Collection<String> tags,
            @Nullable OverallScore overallScore,
            @Nullable RelatedVulnerability relatedVulnerability) {
        this.id = Objects.requireNonNull(id, "Id must be initialized.");
        this.source = Objects.requireNonNull(source, "Source must be initialized.");
        this.title = title;
        this.description = description;
        this.technicalDescription = technicalDescription;
        this.workaround = workaround;
        this.solution = solution;
        this.publishedDate = publishedDate;
        this.lastModifiedDate = lastModifiedDate;
        this.disclosureDate = disclosureDate;
        this.vendorFixDate = vendorFixDate;
        this.exploitAvailableDate = exploitAvailableDate;
        this.cvss2Score = cvss2Score;
        this.cvss3Score = cvss3Score;
        this.references = (references != null) ? ImmutableList.copyOf(references) : ImmutableList.of();
        this.status = status;
        this.tags = (tags != null) ? ImmutableSet.copyOf(tags) : ImmutableSet.of();
        this.overallScore = overallScore;
        this.relatedVulnerability = relatedVulnerability;
    }

    public Vulnerability(CveVulnerability cveVulnerability,
            OverallScore overallScore,
            RelatedVulnerability relatedVulnerability) {
        Objects.requireNonNull(cveVulnerability, "CVE vulnerability must be initialized.");

        this.id = cveVulnerability.getId();
        this.source = VulnerabilitySource.NVD;
        this.title = null;
        this.description = cveVulnerability.getDescription();
        this.technicalDescription = null;
        this.workaround = null;
        this.solution = null;
        this.publishedDate = cveVulnerability.getPublishedDate();
        this.lastModifiedDate = cveVulnerability.getLastModifiedDate();
        this.disclosureDate = null;
        this.vendorFixDate = null;
        this.exploitAvailableDate = null;
        this.cvss2Score = cveVulnerability.getCvss2Score().orElse(null);
        this.cvss3Score = cveVulnerability.getCvss3Score().orElse(null);
        this.references = cveVulnerability.getReferences();
        this.status = cveVulnerability.getStatus().orElse(null);
        this.tags = ImmutableSet.of();
        this.overallScore = overallScore;
        this.relatedVulnerability = relatedVulnerability;
    }

    public Vulnerability(BdsaVulnerability bdsaVulnerability,
            OverallScore overallScore,
            RelatedVulnerability relatedVulnerability) {
        Objects.requireNonNull(bdsaVulnerability, "BDSA vulnerability must be initialized.");

        this.id = bdsaVulnerability.getId();
        this.source = VulnerabilitySource.BDSA;
        this.title = bdsaVulnerability.getTitle();
        this.description = bdsaVulnerability.getDescription();
        this.technicalDescription = bdsaVulnerability.getTechnicalDescription().orElse(null);
        this.workaround = bdsaVulnerability.getWorkaround().orElse(null);
        this.solution = bdsaVulnerability.getSolution().orElse(null);
        this.publishedDate = bdsaVulnerability.getPublishedDate();
        this.lastModifiedDate = bdsaVulnerability.getLastModifiedDate();
        this.disclosureDate = bdsaVulnerability.getDisclosureDate().orElse(null);
        this.vendorFixDate = bdsaVulnerability.getVendorFixDate().orElse(null);
        this.exploitAvailableDate = bdsaVulnerability.getExploitAvailableDate().orElse(null);
        this.cvss2Score = bdsaVulnerability.getCvss2Score().orElse(null);
        this.cvss3Score = bdsaVulnerability.getCvss3Score().orElse(null);
        this.references = bdsaVulnerability.getReferences();
        this.status = bdsaVulnerability.getStatus().orElse(null);
        this.tags = bdsaVulnerability.getTags();
        this.overallScore = overallScore;
        this.relatedVulnerability = relatedVulnerability;
    }

    public String getId() {
        return id;
    }

    public VulnerabilitySource getSource() {
        return source;
    }

    public Optional<String> getTitle() {
        return Optional.ofNullable(title);
    }

    public String getDescription() {
        return description;
    }

    public Optional<String> getTechnicalDescription() {
        return Optional.ofNullable(technicalDescription);
    }

    public Optional<String> getWorkaround() {
        return Optional.ofNullable(workaround);
    }

    public Optional<String> getSolution() {
        return Optional.ofNullable(solution);
    }

    public OffsetDateTime getPublishedDate() {
        return publishedDate;
    }

    public OffsetDateTime getLastModifiedDate() {
        return lastModifiedDate;
    }

    public Optional<OffsetDateTime> getDisclosureDate() {
        return Optional.ofNullable(disclosureDate);
    }

    public Optional<OffsetDateTime> getVendorFixDate() {
        return Optional.ofNullable(vendorFixDate);
    }

    public Optional<OffsetDateTime> getExploitAvailableDate() {
        return Optional.ofNullable(exploitAvailableDate);
    }

    public Optional<Cvss2Score> getCvss2Score() {
        return Optional.ofNullable(cvss2Score);
    }

    public Optional<Cvss3Score> getCvss3Score() {
        return Optional.ofNullable(cvss3Score);
    }

    public List<VulnerabilityReference> getReferences() {
        return references;
    }

    public Optional<VulnerabilityStatus> getStatus() {
        return Optional.ofNullable(status);
    }

    public Set<String> getTags() {
        return tags;
    }

    public Optional<OverallScore> getOverallScore() {
        return Optional.ofNullable(overallScore);
    }

    public Optional<RelatedVulnerability> getRelatedVulnerability() {
        return Optional.ofNullable(relatedVulnerability);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getSource(), getTitle(), getDescription(), getTechnicalDescription(), getWorkaround(), getSolution(), getPublishedDate(),
                getLastModifiedDate(), getDisclosureDate(), getVendorFixDate(), getExploitAvailableDate(), getCvss2Score(), getCvss3Score(), getReferences(),
                getStatus(), getTags(), getOverallScore(), getRelatedVulnerability());
    }

    @Override
    public boolean equals(Object otherObject) {
        if (this == otherObject) {
            return true;
        } else if (otherObject instanceof Vulnerability) {
            Vulnerability otherVulnerability = (Vulnerability) otherObject;

            return Objects.equals(getId(), otherVulnerability.getId())
                    && Objects.equals(getSource(), otherVulnerability.getSource())
                    && Objects.equals(getTitle(), otherVulnerability.getTitle())
                    && Objects.equals(getDescription(), otherVulnerability.getDescription())
                    && Objects.equals(getTechnicalDescription(), otherVulnerability.getTechnicalDescription())
                    && Objects.equals(getWorkaround(), otherVulnerability.getWorkaround())
                    && Objects.equals(getSolution(), otherVulnerability.getSolution())
                    && Objects.equals(getPublishedDate(), otherVulnerability.getPublishedDate())
                    && Objects.equals(getLastModifiedDate(), otherVulnerability.getLastModifiedDate())
                    && Objects.equals(getPublishedDate(), otherVulnerability.getPublishedDate())
                    && Objects.equals(getDisclosureDate(), otherVulnerability.getDisclosureDate())
                    && Objects.equals(getVendorFixDate(), otherVulnerability.getVendorFixDate())
                    && Objects.equals(getExploitAvailableDate(), otherVulnerability.getExploitAvailableDate())
                    && Objects.equals(getCvss2Score(), otherVulnerability.getCvss2Score())
                    && Objects.equals(getCvss3Score(), otherVulnerability.getCvss3Score())
                    && Objects.equals(getReferences(), otherVulnerability.getReferences())
                    && Objects.equals(getStatus(), otherVulnerability.getStatus())
                    && Objects.equals(getTags(), otherVulnerability.getTags())
                    && Objects.equals(getOverallScore(), otherVulnerability.getOverallScore())
                    && Objects.equals(getRelatedVulnerability(), otherVulnerability.getRelatedVulnerability());
        }

        return false;
    }
}
