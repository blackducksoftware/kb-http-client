/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.bd.kb.httpclient.impl;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.google.common.collect.ImmutableList;
import com.synopsys.bd.kb.httpclient.AbstractBdTest;
import com.synopsys.bd.kb.httpclient.model.Vulnerability;
import com.synopsys.bd.kb.httpclient.model.VulnerabilityPriorityRanking;
import com.synopsys.kb.httpclient.model.BdsaVulnerability;
import com.synopsys.kb.httpclient.model.CveVulnerability;
import com.synopsys.kb.httpclient.model.VulnerabilityStatus;

/**
 * Black Duck-centric vulnerability merger test.
 * 
 * @author skatzman
 */
public class BdVulnerabilityMergerTest extends AbstractBdTest {
    // Test a subset of the 24 vulnerability priority ranking permutations but give testing focus to the most common
    // permutations out of the complete set.
    private static final List<VulnerabilityPriorityRanking> BDSA_CVSS3_RANKINGS = ImmutableList.<VulnerabilityPriorityRanking> builder()
            .add(VulnerabilityPriorityRanking.BDSA_CVSS3)
            .add(VulnerabilityPriorityRanking.CVE_CVSS3)
            .add(VulnerabilityPriorityRanking.BDSA_CVSS2)
            .add(VulnerabilityPriorityRanking.CVE_CVSS2).build();

    private static final List<VulnerabilityPriorityRanking> CVE_CVSS3_RANKINGS = ImmutableList.<VulnerabilityPriorityRanking> builder()
            .add(VulnerabilityPriorityRanking.CVE_CVSS3)
            .add(VulnerabilityPriorityRanking.BDSA_CVSS3)
            .add(VulnerabilityPriorityRanking.CVE_CVSS2)
            .add(VulnerabilityPriorityRanking.BDSA_CVSS2).build();

    private static final List<VulnerabilityPriorityRanking> BDSA_RANKINGS = ImmutableList.<VulnerabilityPriorityRanking> builder()
            .add(VulnerabilityPriorityRanking.BDSA_CVSS3)
            .add(VulnerabilityPriorityRanking.BDSA_CVSS2)
            .add(VulnerabilityPriorityRanking.CVE_CVSS3)
            .add(VulnerabilityPriorityRanking.CVE_CVSS2).build();

    private static final List<VulnerabilityPriorityRanking> CVE_RANKINGS = ImmutableList.<VulnerabilityPriorityRanking> builder()
            .add(VulnerabilityPriorityRanking.CVE_CVSS3)
            .add(VulnerabilityPriorityRanking.CVE_CVSS2)
            .add(VulnerabilityPriorityRanking.BDSA_CVSS3)
            .add(VulnerabilityPriorityRanking.BDSA_CVSS2).build();

    private BdVulnerabilityMerger bdVulnerabilityMerger;

    @BeforeMethod
    public void beforeMethod() {
        bdVulnerabilityMerger = new BdVulnerabilityMerger();
    }

    @Test
    public void testMergeWithNoVulnerabilitiesAndBdsaCvss3Rankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_CVSS3_RANKINGS);

        Assert.assertTrue(vulnerabilities.isEmpty(), "Vulnerabilities should be empty.");
    }

    @Test
    public void testMergeWithNoVulnerabilitiesAndCveCvss3Rankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_CVSS3_RANKINGS);

        Assert.assertTrue(vulnerabilities.isEmpty(), "Vulnerabilities should be empty.");
    }

    @Test
    public void testMergeWithNoVulnerabilitiesAndBdsaRankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_RANKINGS);

        Assert.assertTrue(vulnerabilities.isEmpty(), "Vulnerabilities should be empty.");
    }

    @Test
    public void testMergeWithNoVulnerabilitiesAndCveRankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_RANKINGS);

        Assert.assertTrue(vulnerabilities.isEmpty(), "Vulnerabilities should be empty.");
    }

    @Test
    public void testMergeWithAbsentBdsaVulnerabilitiesAndBdsaCvss3Rankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, bdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentBdsaVulnerabilitiesAndCveCvss3Rankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, bdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentBdsaVulnerabilitiesAndBdsaRankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, bdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentBdsaVulnerabilitiesAndCveRankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> bdsaVulnerabilities = Collections.emptyList();

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, bdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentCveVulnerabilitiesAndBdsaCvss3Rankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_CVSS3_RANKINGS);

        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, cveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentCveVulnerabilitiesAndCveCvss3Rankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_CVSS3_RANKINGS);

        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, cveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentCveVulnerabilitiesAndBdsaRankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_RANKINGS);

        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, cveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithAbsentCveVulnerabilitiesAndCveRankings() {
        List<CveVulnerability> cveVulnerabilities = Collections.emptyList();
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_RANKINGS);

        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, cveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithNoRelatedVulnerabilitiesAndBdsaCvss3Rankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithNoRelatedVulnerabilitiesAndCveCvss3Rankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithNoRelatedVulnerabilitiesAndBdsaRankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithNoRelatedVulnerabilitiesAndCveRankings() {
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, null);
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, null);
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, null);
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, null);
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndBdsaCvss3Rankings1() {
        // BDSA3 > CVE3 > BDSA2 > CVE2

        // Removed (unscored).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        // Removed (lower priority).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        // Removed (lower priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Removed (unscored).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, "CVE-2023-0001");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndBdsaCvss3Rankings2() {
        // BDSA3 > CVE3 > BDSA2 > CVE2

        // Removed (lower priority).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, true, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, true, false);
        // Retained (higher priority).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, false, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0001");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability3);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndCveCvss3Rankings1() {
        // CVE3 > BDSA3 > CVE2 > BDSA2

        // Removed (unscored).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        // Retained (higher priority).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        // Retained (higher priority).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        // Retained (higher priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Removed (unscored).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, "CVE-2023-0001");
        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = Collections.emptyList();
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndCveCvss3Rankings2() {
        // CVE3 > BDSA3 > CVE2 > BDSA2

        // Retained (higher priority).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, true, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, true, false);
        // Retained (higher priority).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, false, true);
        // Retained (higher priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0001");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Removed (lower priority).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_CVSS3_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability1, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndBdsaRankings1() {
        // BDSA3 > BDSA2 > CVE3 > CVE2

        // Removed (unscored).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        // Removed (lower priority).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        // Removed (lower priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Removed (unscored).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, "CVE-2023-0001");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndBdsaRankings2() {
        // BDSA3 > BDSA2 > CVE3 > CVE2

        // Removed (lower priority).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, true, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, true, false);
        // Removed (lower priority).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, false, true);
        // Removed (lower priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0001");
        // Retained (higher priority)
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Retained (higher priority)
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Retained (higher priority).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, BDSA_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = Collections.emptyList();
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndCveRankings1() {
        // CVE3 > CVE2 > BDSA3 > BDSA2

        // Removed (unscored).
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, false, false);
        // Retained (higher priority - CVE3 > BDSA3).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, false, true);
        // Retained (higher priority - CVE2 > BDSA2).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, true, false);
        // Retained (higher priority).
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, true, true);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Removed (unscored).
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, false, false, "CVE-2023-0001");
        // Removed (lower priority - BDSA3 < CVE3).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Removed (lower priority - BDSA2 < CVE 2).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Removed (lower priority - BDSA3 < CVE2 < CVE3, BDSA2 < CVE2 < CVE3).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability2, cveVulnerability3, cveVulnerability4);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = Collections.emptyList();
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    @Test
    public void testMergeWithRelatedVulnerabilitiesAndCveRankings2() {
        // CVE3 > CVE2 > BDSA3 > BDSA2

        // Retained (higher priority - CVE3 > CVE2 > BDSA3)
        CveVulnerability cveVulnerability1 = constructCveVulnerability("CVE-2023-0001", VulnerabilityStatus.AFFECTED, true, true);
        // Retained (higher priority - CVE2 > BDSA3).
        CveVulnerability cveVulnerability2 = constructCveVulnerability("CVE-2023-0002", VulnerabilityStatus.AFFECTED, true, false);
        // Retained (higher priority - CVE3 > BDSA2).
        CveVulnerability cveVulnerability3 = constructCveVulnerability("CVE-2023-0003", VulnerabilityStatus.AFFECTED, false, true);
        // Removed (unscored)
        CveVulnerability cveVulnerability4 = constructCveVulnerability("CVE-2023-0004", VulnerabilityStatus.AFFECTED, false, false);
        List<CveVulnerability> cveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3, cveVulnerability4);

        // Removed (lower priority - BDSA3 < CVE2 < CVE3)
        BdsaVulnerability bdsaVulnerability1 = constructBdsaVulnerability("BDSA-2023-0001", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0001");
        // Removed (lower priority - BDSA3 < CVE2).
        BdsaVulnerability bdsaVulnerability2 = constructBdsaVulnerability("BDSA-2023-0002", VulnerabilityStatus.AFFECTED, false, true, "CVE-2023-0002");
        // Removed (lower priority - BDSA2 < CVE3).
        BdsaVulnerability bdsaVulnerability3 = constructBdsaVulnerability("BDSA-2023-0003", VulnerabilityStatus.AFFECTED, true, false, "CVE-2023-0003");
        // Retained (related is unscored).
        BdsaVulnerability bdsaVulnerability4 = constructBdsaVulnerability("BDSA-2023-0004", VulnerabilityStatus.AFFECTED, true, true, "CVE-2023-0004");
        List<BdsaVulnerability> bdsaVulnerabilities = List.of(bdsaVulnerability1, bdsaVulnerability2, bdsaVulnerability3, bdsaVulnerability4);

        List<Vulnerability> vulnerabilities = bdVulnerabilityMerger.merge(cveVulnerabilities, bdsaVulnerabilities, CVE_RANKINGS);

        List<CveVulnerability> expectedCveVulnerabilities = List.of(cveVulnerability1, cveVulnerability2, cveVulnerability3);
        List<BdsaVulnerability> expectedBdsaVulnerabilities = List.of(bdsaVulnerability4);
        assertVulnerabilities(vulnerabilities, expectedCveVulnerabilities, expectedBdsaVulnerabilities);
    }

    private void assertVulnerabilities(List<Vulnerability> actualVulnerabilities,
            List<CveVulnerability> expectedCveVulnerabilities,
            List<BdsaVulnerability> expectedBdsaVulnerabilities) {
        int numberOfExpectedCveVulnerabilities = expectedCveVulnerabilities.size();
        int numberOfExpectedBdsaVulnerabilities = expectedBdsaVulnerabilities.size();
        int numberOfExpectedVulnerabilities = numberOfExpectedCveVulnerabilities + numberOfExpectedBdsaVulnerabilities;
        Assert.assertEquals(actualVulnerabilities.size(), numberOfExpectedVulnerabilities, "Number of vulnerabilities should be equal.");

        Map<String, Vulnerability> actualVulnerabilityMap = actualVulnerabilities.stream()
                .collect(Collectors.toMap(Vulnerability::getId, Function.identity(), (left, right) -> left));

        for (CveVulnerability expectedCveVulnerability : expectedCveVulnerabilities) {
            String cveVulnerabilityId = expectedCveVulnerability.getId();
            Assert.assertTrue(actualVulnerabilityMap.containsKey(cveVulnerabilityId), "CVE vulnerability should be present.");
        }

        for (BdsaVulnerability expectedBdsaVulnerability : expectedBdsaVulnerabilities) {
            String bdsaVulnerabilityId = expectedBdsaVulnerability.getId();
            Assert.assertTrue(actualVulnerabilityMap.containsKey(bdsaVulnerabilityId), "BDSA vulnerability should be present.");
        }
    }
}
