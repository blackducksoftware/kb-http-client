/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.bd.kb.httpclient.model;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.synopsys.bd.kb.httpclient.AbstractBdTest;
import com.synopsys.kb.httpclient.model.Cvss2AccessComplexity;
import com.synopsys.kb.httpclient.model.Cvss2AccessVector;
import com.synopsys.kb.httpclient.model.Cvss2Authentication;
import com.synopsys.kb.httpclient.model.Cvss2AvailabilityImpact;
import com.synopsys.kb.httpclient.model.Cvss2ConfidentialityImpact;
import com.synopsys.kb.httpclient.model.Cvss2Exploitability;
import com.synopsys.kb.httpclient.model.Cvss2IntegrityImpact;
import com.synopsys.kb.httpclient.model.Cvss2RemediationLevel;
import com.synopsys.kb.httpclient.model.Cvss2ReportConfidence;
import com.synopsys.kb.httpclient.model.Cvss2Score;
import com.synopsys.kb.httpclient.model.Cvss2TemporalMetrics;
import com.synopsys.kb.httpclient.model.Cvss3AttackComplexity;
import com.synopsys.kb.httpclient.model.Cvss3AttackVector;
import com.synopsys.kb.httpclient.model.Cvss3AvailabilityImpact;
import com.synopsys.kb.httpclient.model.Cvss3ConfidentialityImpact;
import com.synopsys.kb.httpclient.model.Cvss3ExploitCodeMaturity;
import com.synopsys.kb.httpclient.model.Cvss3IntegrityImpact;
import com.synopsys.kb.httpclient.model.Cvss3PrivilegesRequired;
import com.synopsys.kb.httpclient.model.Cvss3RemediationLevel;
import com.synopsys.kb.httpclient.model.Cvss3ReportConfidence;
import com.synopsys.kb.httpclient.model.Cvss3Scope;
import com.synopsys.kb.httpclient.model.Cvss3Score;
import com.synopsys.kb.httpclient.model.Cvss3TemporalMetrics;
import com.synopsys.kb.httpclient.model.Cvss3UserInteraction;
import com.synopsys.kb.httpclient.model.VulnerabilityReference;
import com.synopsys.kb.httpclient.model.VulnerabilitySeverity;
import com.synopsys.kb.httpclient.model.VulnerabilitySource;
import com.synopsys.kb.httpclient.model.VulnerabilityStatus;

/**
 * Vulnerability test.
 * 
 * @author skatzman
 */
public class VulnerabilityTest extends AbstractBdTest {
    private static final String ID = "BDSA-2023-0001";

    private static final VulnerabilitySource SOURCE = VulnerabilitySource.BDSA;

    private static final String TITLE = "This is a title.";

    private static final String DESCRIPTION = "This is a description.";

    private static final String TECHNICAL_DESCRIPTION = "This is a technical description.";

    private static final String WORKAROUND = "This is a workaround.";

    private static final String SOLUTION = "This is a solution.";

    private static final OffsetDateTime PUBLISHED_DATE = OffsetDateTime.now();

    private static final OffsetDateTime LAST_MODIFIED_DATE = OffsetDateTime.now();

    private static final OffsetDateTime DISCLOSURE_DATE = OffsetDateTime.now();

    private static final OffsetDateTime VENDOR_FIX_DATE = OffsetDateTime.now();

    private static final OffsetDateTime EXPLOIT_AVAILABLE_DATE = OffsetDateTime.now();

    private static final Cvss2Score CVSS2_SCORE = new Cvss2Score(1.0d, 2.0d, 3.0d, VulnerabilitySeverity.LOW, Cvss2AccessVector.ADJACENT_NETWORK,
            Cvss2AccessComplexity.HIGH, Cvss2Authentication.MULTIPLE_INSTANCES, Cvss2ConfidentialityImpact.COMPLETE, Cvss2IntegrityImpact.COMPLETE,
            Cvss2AvailabilityImpact.COMPLETE, VulnerabilitySource.BDSA, "This is a CVSS2 vector.",
            new Cvss2TemporalMetrics(4.0d, Cvss2Exploitability.FUNCTIONAL, Cvss2RemediationLevel.NOT_DEFINED, Cvss2ReportConfidence.CONFIRMED));

    private static final Cvss3Score CVSS3_SCORE = new Cvss3Score(1.0d, 2.0d, 3.0d, VulnerabilitySeverity.CRITICAL, Cvss3AttackVector.ADJACENT,
            Cvss3AttackComplexity.HIGH, Cvss3ConfidentialityImpact.HIGH, Cvss3IntegrityImpact.HIGH, Cvss3AvailabilityImpact.HIGH, Cvss3PrivilegesRequired.HIGH,
            Cvss3Scope.CHANGED, Cvss3UserInteraction.NONE, VulnerabilitySource.BDSA, "This is a CVSS3 vector.",
            new Cvss3TemporalMetrics(4.0d, Cvss3ExploitCodeMaturity.FUNCTIONAL, Cvss3RemediationLevel.NOT_DEFINED, Cvss3ReportConfidence.CONFIRMED));

    private static final List<VulnerabilityReference> REFERENCES = List.of(new VulnerabilityReference("source", "https://www.blah.com", "content", "type"));

    private static final VulnerabilityStatus STATUS = VulnerabilityStatus.AFFECTED;

    private static final Collection<String> TAGS = Set.of("1", "2", "3");

    private static final OverallScore OVERALL_SCORE = new OverallScore(2.0d, VulnerabilitySeverity.LOW, CvssScore.CVSS3);

    private static final RelatedVulnerability RELATED_VULNERABILITY = new RelatedVulnerability(VulnerabilitySource.NVD, "CVE-2023-0001", true);

    @Test
    public void testConstructor() {
        Vulnerability vulnerability = new Vulnerability(ID, SOURCE, TITLE, DESCRIPTION, TECHNICAL_DESCRIPTION, WORKAROUND, SOLUTION, PUBLISHED_DATE,
                LAST_MODIFIED_DATE, DISCLOSURE_DATE, VENDOR_FIX_DATE, EXPLOIT_AVAILABLE_DATE, CVSS2_SCORE, CVSS3_SCORE, REFERENCES, STATUS, TAGS,
                OVERALL_SCORE, RELATED_VULNERABILITY);

        Assert.assertEquals(vulnerability.getId(), ID, "Ids should be equal.");
        Assert.assertEquals(vulnerability.getSource(), SOURCE, "Sources should be equal.");
        Assert.assertEquals(vulnerability.getTitle().orElse(null), TITLE, "Titles should be equal.");
        Assert.assertEquals(vulnerability.getDescription(), DESCRIPTION, "Description should be equal.");
        Assert.assertEquals(vulnerability.getTechnicalDescription().orElse(null), TECHNICAL_DESCRIPTION, "Technical description should be equal.");
        Assert.assertEquals(vulnerability.getWorkaround().orElse(null), WORKAROUND, "Workarounds should be equal.");
        Assert.assertEquals(vulnerability.getSolution().orElse(null), SOLUTION, "Solutions should be equal.");
        Assert.assertEquals(vulnerability.getPublishedDate(), PUBLISHED_DATE, "Published dates should be equal.");
        Assert.assertEquals(vulnerability.getLastModifiedDate(), LAST_MODIFIED_DATE, "Last modified dates should be equal.");
        Assert.assertEquals(vulnerability.getDisclosureDate().orElse(null), DISCLOSURE_DATE, "Disclosure dates should be equal.");
        Assert.assertEquals(vulnerability.getVendorFixDate().orElse(null), VENDOR_FIX_DATE, "Vendor fix dates should be equal.");
        Assert.assertEquals(vulnerability.getExploitAvailableDate().orElse(null), EXPLOIT_AVAILABLE_DATE, "Exploit available dates should be equal.");
        Assert.assertEquals(vulnerability.getCvss2Score().orElse(null), CVSS2_SCORE, "CVSS2 scores should be equal.");
        Assert.assertEquals(vulnerability.getCvss3Score().orElse(null), CVSS3_SCORE, "CVSS3 scores should be equal.");
        Assert.assertEquals(vulnerability.getReferences(), REFERENCES, "References should be equal.");
        Assert.assertEquals(vulnerability.getStatus().orElse(null), STATUS, "Status should be equal.");
        Assert.assertEquals(vulnerability.getTags(), TAGS, "Tags should be equal.");
        Assert.assertEquals(vulnerability.getOverallScore().orElse(null), OVERALL_SCORE, "Overall scores should be equal.");
        Assert.assertEquals(vulnerability.getRelatedVulnerability().orElse(null), RELATED_VULNERABILITY, "Related vulnerabilities should be equal.");
    }
}
