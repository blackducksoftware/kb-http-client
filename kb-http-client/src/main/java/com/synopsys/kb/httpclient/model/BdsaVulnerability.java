/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.model;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableSet;
import com.synopsys.kb.httpclient.api.Relationship;

/**
 * BDSA vulnerability representation.
 * 
 * BDSA vulnerabilities can contain meta links to other vulnerabilities. BDSA designates soft duplicate CVE
 * vulnerabilities if the 'cve' relationship link is present and that CVE vulnerability is also present and associated
 * to the same component version or component variant.
 * - 0-to-1 'cve' relationship link to a related CVE.
 * - 0-to-many 'related' relationship links to related CVEs.
 * - 0-to-many 'child-bdsa' relationship links to related hierarchical children BDSAs.
 * - 0-to-many 'child-cve' relationship links to related hierarchical children CVEs.
 * 
 * @author skatzman
 */
public class BdsaVulnerability extends SourcedVulnerability {
    private final String title;

    private final String technicalDescription;

    private final String workaround;

    private final String solution;

    private final String credit;

    private final OffsetDateTime discoveryDate;

    private final OffsetDateTime vendorNotifiedDate;

    private final OffsetDateTime disclosureDate;

    private final OffsetDateTime vendorFixDate;

    private final OffsetDateTime exploitAvailableDate;

    private final boolean isZeroDay;

    private final boolean isUnderReview;

    private final boolean isParentAdvisory;

    private final Set<String> tags;

    @JsonCreator
    public BdsaVulnerability(@JsonProperty("title") String title,
            @JsonProperty("description") String description,
            @JsonProperty("technicalDescription") String technicalDescription,
            @JsonProperty("workaround") String workaround,
            @JsonProperty("solution") String solution,
            @JsonProperty("credit") String credit,
            @JsonProperty("publishedDate") OffsetDateTime publishedDate,
            @JsonProperty("lastModifiedDate") OffsetDateTime lastModifiedDate,
            @JsonProperty("discoveryDate") OffsetDateTime discoveryDate,
            @JsonProperty("vendorNotifiedDate") OffsetDateTime vendorNotifiedDate,
            @JsonProperty("disclosureDate") OffsetDateTime disclosureDate,
            @JsonProperty("vendorFixDate") OffsetDateTime vendorFixDate,
            @JsonProperty("exploitAvailableDate") OffsetDateTime exploitAvailableDate,
            @JsonProperty("zeroDay") Boolean zeroDay,
            @JsonProperty("underReview") Boolean underReview,
            @JsonProperty("parentAdvisory") Boolean parentAdvisory,
            @JsonProperty("cvss2") Cvss2Score cvss2Score,
            @JsonProperty("cvss3") Cvss3Score cvss3Score,
            @JsonProperty("references") List<VulnerabilityReference> references,
            @JsonProperty("status") VulnerabilityStatus status,
            @JsonProperty("tags") Collection<String> tags,
            @JsonProperty("_meta") Meta meta) {
        super(description, publishedDate, lastModifiedDate, cvss2Score, cvss3Score, references, status, meta);

        this.title = title;
        this.technicalDescription = technicalDescription;
        this.workaround = !Strings.isNullOrEmpty(workaround) ? workaround : null;
        this.solution = !Strings.isNullOrEmpty(solution) ? solution : null;
        this.credit = credit;
        this.discoveryDate = discoveryDate;
        this.vendorNotifiedDate = vendorNotifiedDate;
        this.disclosureDate = disclosureDate;
        this.vendorFixDate = vendorFixDate;
        this.exploitAvailableDate = exploitAvailableDate;
        this.isZeroDay = (zeroDay != null) ? zeroDay.booleanValue() : false;
        this.isUnderReview = (underReview != null) ? underReview.booleanValue() : false;
        this.isParentAdvisory = (parentAdvisory != null) ? parentAdvisory.booleanValue() : false;
        this.tags = (tags != null) ? ImmutableSet.copyOf(tags) : ImmutableSet.of();
    }

    /**
     * Gets the id.
     *
     * @return UUID Returns the id.
     * @throws IllegalArgumentException
     *             Throws if the id is absent.
     */
    @Override
    @JsonIgnore
    public final String getId() {
        Meta meta = getMeta();

        return meta.getHrefId("bdsa").orElseThrow(() -> new IllegalArgumentException("Unable to get id because it is absent."));
    }

    public String getTitle() {
        return title;
    }

    public Optional<String> getTechnicalDescription() {
        return Optional.ofNullable(technicalDescription);
    }

    public Optional<String> getWorkaround() {
        return Optional.ofNullable(workaround);
    }

    /**
     * Determines if the vulnerability has a documented workaround.
     * 
     * @return Returns true if the vulnerability has a documented workaround and false otherwise.
     */
    @JsonIgnore
    public boolean isWorkaroundPresent() {
        return getWorkaround().map((workaround) -> Boolean.TRUE).orElseGet(() -> Boolean.FALSE).booleanValue();
    }

    public Optional<String> getSolution() {
        return Optional.ofNullable(solution);
    }

    /**
     * Determines if the vulnerability has a documented solution.
     * 
     * @return Returns true if the vulnerability has a documented solution and false otherwise.
     */
    @JsonIgnore
    public boolean isSolutionPresent() {
        return getSolution().map((solution) -> Boolean.TRUE).orElseGet(() -> Boolean.FALSE).booleanValue();
    }

    public Optional<String> getCredit() {
        return Optional.ofNullable(credit);
    }

    public Optional<OffsetDateTime> getDiscoveryDate() {
        return Optional.ofNullable(discoveryDate);
    }

    public Optional<OffsetDateTime> getVendorNotifiedDate() {
        return Optional.ofNullable(vendorNotifiedDate);
    }

    public Optional<OffsetDateTime> getDisclosureDate() {
        return Optional.ofNullable(disclosureDate);
    }

    public Optional<OffsetDateTime> getVendorFixDate() {
        return Optional.ofNullable(vendorFixDate);
    }

    public Optional<OffsetDateTime> getExploitAvailableDate() {
        return Optional.ofNullable(exploitAvailableDate);
    }

    public boolean isZeroDay() {
        return isZeroDay;
    }

    public boolean isUnderReview() {
        return isUnderReview;
    }

    public boolean isParentAdvisory() {
        return isParentAdvisory;
    }

    public Set<String> getTags() {
        return tags;
    }

    @JsonIgnore
    public Set<String> getCweIds() {
        Meta meta = getMeta();

        return meta.findLinkIds(Relationship.CWE, "cwe");
    }

    @JsonIgnore
    public Optional<String> getRelatedCveVulnerabilityId() {
        Meta meta = getMeta();

        return meta.findUniqueLinkId(Relationship.CVE, "cve");
    }

    @Override
    public int hashCode() {
        return Objects.hash(getTitle(), getDescription(), getTechnicalDescription(), getWorkaround(), getSolution(), getCredit(), getPublishedDate(),
                getLastModifiedDate(), getDiscoveryDate(), getVendorNotifiedDate(), getDisclosureDate(), getVendorFixDate(), getExploitAvailableDate(),
                isZeroDay(), isUnderReview(), isParentAdvisory(), getCvss2Score(), getCvss3Score(), getReferences(), getStatus(), getTags(), getMeta());
    }

    @Override
    public boolean equals(Object otherObject) {
        if (this == otherObject) {
            return true;
        } else if (otherObject instanceof BdsaVulnerability) {
            BdsaVulnerability otherBdsaVulnerability = (BdsaVulnerability) otherObject;

            return Objects.equals(getTitle(), otherBdsaVulnerability.getTitle())
                    && Objects.equals(getDescription(), otherBdsaVulnerability.getDescription())
                    && Objects.equals(getTechnicalDescription(), otherBdsaVulnerability.getTechnicalDescription())
                    && Objects.equals(getWorkaround(), otherBdsaVulnerability.getWorkaround())
                    && Objects.equals(getSolution(), otherBdsaVulnerability.getSolution())
                    && Objects.equals(getCredit(), otherBdsaVulnerability.getCredit())
                    && Objects.equals(getPublishedDate(), otherBdsaVulnerability.getPublishedDate())
                    && Objects.equals(getLastModifiedDate(), otherBdsaVulnerability.getLastModifiedDate())
                    && Objects.equals(getDiscoveryDate(), otherBdsaVulnerability.getDiscoveryDate())
                    && Objects.equals(getVendorNotifiedDate(), otherBdsaVulnerability.getVendorNotifiedDate())
                    && Objects.equals(getDisclosureDate(), otherBdsaVulnerability.getDisclosureDate())
                    && Objects.equals(getVendorFixDate(), otherBdsaVulnerability.getVendorFixDate())
                    && Objects.equals(getExploitAvailableDate(), otherBdsaVulnerability.getExploitAvailableDate())
                    && Objects.equals(isZeroDay(), otherBdsaVulnerability.isZeroDay())
                    && Objects.equals(isUnderReview(), otherBdsaVulnerability.isUnderReview())
                    && Objects.equals(isParentAdvisory(), otherBdsaVulnerability.isParentAdvisory())
                    && Objects.equals(getCvss2Score(), otherBdsaVulnerability.getCvss2Score())
                    && Objects.equals(getCvss3Score(), otherBdsaVulnerability.getCvss3Score())
                    && Objects.equals(getReferences(), otherBdsaVulnerability.getReferences())
                    && Objects.equals(getStatus(), otherBdsaVulnerability.getStatus())
                    && Objects.equals(getTags(), otherBdsaVulnerability.getTags())
                    && Objects.equals(getMeta(), otherBdsaVulnerability.getMeta());
        }

        return false;
    }
}
