/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.model;

import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

import javax.annotation.Nullable;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BDSA vulnerability range representation.
 * 
 * @author skatzman
 */
public class BdsaVulnerabilityRange extends AbstractEntity {
    // The vulnerability URI.
    private final String vulnerability;

    private final String vendor;

    private final String product;

    private final String versionStart;

    private final String versionEnd;

    // The component URI.
    @Nullable
    private final String component;

    @Nullable
    private final String componentName;

    @JsonCreator
    public BdsaVulnerabilityRange(@JsonProperty("vulnerability") String vulnerability,
            @JsonProperty("vendor") String vendor,
            @JsonProperty("product") String product,
            @JsonProperty("versionStart") String versionStart,
            @JsonProperty("versionEnd") String versionEnd,
            @JsonProperty("component") String component,
            @JsonProperty("componentName") String componentName) {
        this.vulnerability = vulnerability;
        this.vendor = vendor;
        this.product = product;
        this.versionStart = versionStart;
        this.versionEnd = versionEnd;
        this.component = component;
        this.componentName = componentName;
    }

    @JsonIgnore
    public String getVulnerabilityId() {
        String vulnerabilityHref = getVulnerability();

        return extractId(vulnerabilityHref, "bdsa").orElseThrow(() -> new IllegalStateException("Unable to get vulnerability id because it is absent."));
    }

    public String getVulnerability() {
        return vulnerability;
    }

    public String getVendor() {
        return vendor;
    }

    public String getProduct() {
        return product;
    }

    public String getVersionStart() {
        return versionStart;
    }

    public String getVersionEnd() {
        return versionEnd;
    }

    @JsonIgnore
    public Optional<UUID> getComponentId() {
        return getComponent().map((componentHref) -> extractId(componentHref, "components").orElse(null))
                .map(UUID::fromString);
    }

    public Optional<String> getComponent() {
        return Optional.ofNullable(component);
    }

    public Optional<String> getComponentName() {
        return Optional.ofNullable(componentName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getVulnerability(),
                getVendor(),
                getProduct(),
                getVersionStart(),
                getVersionEnd(),
                getComponent(),
                getComponentName());
    }

    @Override
    public boolean equals(@Nullable Object otherObject) {
        boolean result = false;

        if (otherObject instanceof BdsaVulnerabilityRange) {
            BdsaVulnerabilityRange otherBdsaVulnerabilityRange = (BdsaVulnerabilityRange) otherObject;

            result = Objects.equals(getVulnerability(), otherBdsaVulnerabilityRange.getVulnerability())
                    && Objects.equals(getVendor(), otherBdsaVulnerabilityRange.getVendor())
                    && Objects.equals(getProduct(), otherBdsaVulnerabilityRange.getProduct())
                    && Objects.equals(getVersionStart(), otherBdsaVulnerabilityRange.getVersionStart())
                    && Objects.equals(getVersionEnd(), otherBdsaVulnerabilityRange.getVersionEnd())
                    && Objects.equals(getComponent(), otherBdsaVulnerabilityRange.getComponent())
                    && Objects.equals(getComponentName(), otherBdsaVulnerabilityRange.getComponentName());
        }

        return result;
    }
}
