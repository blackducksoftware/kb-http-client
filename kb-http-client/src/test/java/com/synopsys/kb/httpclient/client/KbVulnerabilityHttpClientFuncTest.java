/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.client;

import java.util.Collections;
import java.util.List;

import org.apache.hc.core5.http.HttpStatus;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.synopsys.kb.httpclient.AbstractFuncTest;
import com.synopsys.kb.httpclient.api.HttpResponse;
import com.synopsys.kb.httpclient.api.HttpResult;
import com.synopsys.kb.httpclient.api.IKbHttpApi;
import com.synopsys.kb.httpclient.api.IVulnerabilityApi;
import com.synopsys.kb.httpclient.api.PageRequest;
import com.synopsys.kb.httpclient.model.BdsaVulnerability;
import com.synopsys.kb.httpclient.model.BdsaVulnerabilityRange;
import com.synopsys.kb.httpclient.model.CveVulnerability;
import com.synopsys.kb.httpclient.model.Page;

/**
 * KB vulnerability HTTP client functional test.
 * 
 * @author skatzman
 */
public class KbVulnerabilityHttpClientFuncTest extends AbstractFuncTest {
    private IVulnerabilityApi vulnerabilityApi;

    @BeforeClass
    public void beforeClass() {
        IKbHttpApi kbHttpApi = getKbHttpApi();
        this.vulnerabilityApi = kbHttpApi.getVulnerabilityApi();
    }

    @Test
    public void testFindCveVulnerabilityV7() {
        String cveVulnerabilityId = "CVE-2020-1243";

        HttpResult<CveVulnerability> httpResult = vulnerabilityApi.findCveVulnerabilityV7(cveVulnerabilityId);

        HttpResponse<CveVulnerability> httpResponse = httpResult.getHttpResponse().orElse(null);

        Assert.assertNotNull(httpResponse, "HTTP response should be initialized.");
        Assert.assertEquals(httpResponse.getCode(), HttpStatus.SC_OK, "Codes should be equal.");
        Assert.assertTrue(httpResponse.isMessageBodyPresent(), "Message body should be present.");
        CveVulnerability cveVulnerability = httpResponse.getMessageBody().orElse(null);
        Assert.assertNotNull(cveVulnerability, "CVE vulnerability should be initialized.");
        Assert.assertEquals(cveVulnerability.getId(), cveVulnerabilityId, "CVE vulnerability ids should be equal.");
    }

    @Test
    public void testFindBdsaVulnerabilityV7() {
        String bdsaVulnerabilityId = "BDSA-2014-0114";

        HttpResult<BdsaVulnerability> httpResult = vulnerabilityApi.findBdsaVulnerabilityV7(bdsaVulnerabilityId);

        HttpResponse<BdsaVulnerability> httpResponse = httpResult.getHttpResponse().orElse(null);

        Assert.assertNotNull(httpResponse, "HTTP response should be initialized.");
        Assert.assertEquals(httpResponse.getCode(), HttpStatus.SC_OK, "Codes should be equal.");
        Assert.assertTrue(httpResponse.isMessageBodyPresent(), "Message body should be present.");
        BdsaVulnerability bdsaVulnerability = httpResponse.getMessageBody().orElse(null);
        Assert.assertNotNull(bdsaVulnerability, "BDSA vulnerability should be initialized.");
        Assert.assertEquals(bdsaVulnerability.getId(), bdsaVulnerabilityId, "BDSA vulnerability ids should be equal.");
    }

    @Test
    public void testFindBdsaVulnerabilityRangesV7() {
        PageRequest pageRequest = new PageRequest(0, 10, Collections.emptyList());
        String bdsaVulnerabilityId = "BDSA-2014-0114";

        HttpResult<Page<BdsaVulnerabilityRange>> httpResult = vulnerabilityApi.findBdsaVulnerabilityRangesV7(pageRequest, bdsaVulnerabilityId);

        HttpResponse<Page<BdsaVulnerabilityRange>> httpResponse = httpResult.getHttpResponse().orElse(null);

        Assert.assertEquals(httpResponse.getCode(), HttpStatus.SC_OK, "Codes should be equal.");
        Assert.assertTrue(httpResponse.isMessageBodyPresent(), "Message body should be present.");
        Page<BdsaVulnerabilityRange> page = httpResponse.getMessageBody().orElse(null);
        Assert.assertNotNull(page, "Page should be initialized.");
        List<BdsaVulnerabilityRange> items = page.getItems();
        Assert.assertNotNull(items, "Items should be initialized.");
        Assert.assertFalse(items.isEmpty(), "Items should not be empty.");
    }
}
