/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.model;

import java.util.UUID;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.synopsys.kb.httpclient.AbstractTest;

/**
 * BDSA vulnerability range test.
 * 
 * @author skatzman
 */
public class BdsaVulnerabilityRangeTest extends AbstractTest {
    private static final String VULNERABILITY_ID = "BDSA-2014-0114";

    private static final String VULNERABILITY = BASE_HREF + "/api/vulnerabilities/bdsa/" + VULNERABILITY_ID;

    private static final String VENDOR = "jquery";

    private static final String PRODUCT = "jquery";

    private static final String VERSION_START = "1.4.2";

    private static final String VERSION_END = "1.4.2";

    private static final UUID COMPONENT_ID = UUID.randomUUID();

    private static final String COMPONENT = BASE_HREF + "/api/components/" + COMPONENT_ID;

    private static final String COMPONENT_NAME = "shimney-jquery";

    @Test
    public void testConstructor() {
        BdsaVulnerabilityRange bdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);

        Assert.assertEquals(bdsaVulnerabilityRange.getVulnerability(), VULNERABILITY, "Vulnerabilities should be equal.");
        Assert.assertEquals(bdsaVulnerabilityRange.getVendor(), VENDOR, "Vendors should be equal.");
        Assert.assertEquals(bdsaVulnerabilityRange.getProduct(), PRODUCT, "Products should be equal.");
        Assert.assertEquals(bdsaVulnerabilityRange.getVersionStart(), VERSION_START, "Version starts should be equal.");
        Assert.assertEquals(bdsaVulnerabilityRange.getVersionEnd(), VERSION_END, "Version ends should be equal.");
        Assert.assertEquals(bdsaVulnerabilityRange.getComponent().orElse(null), COMPONENT, "Components should be equal.");
        Assert.assertEquals(bdsaVulnerabilityRange.getComponentName().orElse(null), COMPONENT_NAME, "Component names should be equal.");

        Assert.assertEquals(bdsaVulnerabilityRange.getVulnerabilityId(), VULNERABILITY_ID, "Vulnerability ids should be equal.");
    }

    @Test
    public void testGetComponentIdWhenAbsent() {
        BdsaVulnerabilityRange bdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, null, null);

        Assert.assertFalse(bdsaVulnerabilityRange.getComponentId().isPresent(), "Component id should not be present.");
    }

    @Test
    public void testGetComponentIdWhenPresent() {
        BdsaVulnerabilityRange bdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);

        Assert.assertEquals(bdsaVulnerabilityRange.getComponentId().orElse(null), COMPONENT_ID, "Component ids should be equal.");
    }

    @Test
    public void testDeserialization() throws JsonProcessingException {
        BdsaVulnerabilityRange bdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);

        String json = serialize(bdsaVulnerabilityRange);
        BdsaVulnerabilityRange result = deserialize(json, BdsaVulnerabilityRange.class);

        Assert.assertEquals(result.getVulnerability(), VULNERABILITY, "Vulnerabilities should be equal.");
        Assert.assertEquals(result.getVendor(), VENDOR, "Vendors should be equal.");
        Assert.assertEquals(result.getProduct(), PRODUCT, "Products should be equal.");
        Assert.assertEquals(result.getVersionStart(), VERSION_START, "Version starts should be equal.");
        Assert.assertEquals(result.getVersionEnd(), VERSION_END, "Version ends should be equal.");
        Assert.assertEquals(result.getComponent().orElse(null), COMPONENT, "Components should be equal.");
        Assert.assertEquals(result.getComponentName().orElse(null), COMPONENT_NAME, "Component names should be equal.");
    }

    @Test
    public void testHashCode() {
        BdsaVulnerabilityRange bdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);
        BdsaVulnerabilityRange copyBdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);
        BdsaVulnerabilityRange differentBdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END,
                COMPONENT, "differentComponentName");

        assertHashCode(bdsaVulnerabilityRange, copyBdsaVulnerabilityRange, differentBdsaVulnerabilityRange);
    }

    @Test
    public void testEquals() {
        BdsaVulnerabilityRange bdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);
        BdsaVulnerabilityRange copyBdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END, COMPONENT,
                COMPONENT_NAME);
        BdsaVulnerabilityRange differentBdsaVulnerabilityRange = new BdsaVulnerabilityRange(VULNERABILITY, VENDOR, PRODUCT, VERSION_START, VERSION_END,
                COMPONENT, "differentComponentName");

        assertEquals(bdsaVulnerabilityRange, copyBdsaVulnerabilityRange, differentBdsaVulnerabilityRange);
    }
}
