/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.model;

import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.synopsys.kb.httpclient.AbstractTest;

/**
 * CVE vulnerability test.
 * 
 * @author skatzman
 */
public class CveVulnerabilityTest extends AbstractTest {
    private static final String ID = "CVE-2023-0001";

    private static final String DESCRIPTION = "This is a description.";

    private static final OffsetDateTime PUBLISHED_DATE = OffsetDateTime.now();

    private static final OffsetDateTime LAST_MODIFIED_DATE = OffsetDateTime.now();

    private static final Cvss2Score CVSS2_SCORE = new Cvss2Score(1.0d, 2.0d, 3.0d, VulnerabilitySeverity.LOW, Cvss2AccessVector.ADJACENT_NETWORK,
            Cvss2AccessComplexity.HIGH, Cvss2Authentication.MULTIPLE_INSTANCES, Cvss2ConfidentialityImpact.COMPLETE, Cvss2IntegrityImpact.COMPLETE,
            Cvss2AvailabilityImpact.COMPLETE, VulnerabilitySource.NVD, "This is a CVSS2 vector.",
            new Cvss2TemporalMetrics(4.0d, Cvss2Exploitability.FUNCTIONAL, Cvss2RemediationLevel.NOT_DEFINED, Cvss2ReportConfidence.CONFIRMED));

    private static final Cvss3Score CVSS3_SCORE = new Cvss3Score(1.0d, 2.0d, 3.0d, VulnerabilitySeverity.CRITICAL, Cvss3AttackVector.ADJACENT,
            Cvss3AttackComplexity.HIGH, Cvss3ConfidentialityImpact.HIGH, Cvss3IntegrityImpact.HIGH, Cvss3AvailabilityImpact.HIGH, Cvss3PrivilegesRequired.HIGH,
            Cvss3Scope.CHANGED, Cvss3UserInteraction.NONE, VulnerabilitySource.NVD, "This is a CVSS3 vector.",
            new Cvss3TemporalMetrics(4.0d, Cvss3ExploitCodeMaturity.FUNCTIONAL, Cvss3RemediationLevel.NOT_DEFINED, Cvss3ReportConfidence.CONFIRMED));

    private static final List<VulnerabilityReference> REFERENCES = List.of(new VulnerabilityReference("source", "https://www.blah.com", "content", "type"));

    private static final VulnerabilityStatus STATUS = VulnerabilityStatus.AFFECTED;

    private static final Meta META = new Meta("https://kbtest.blackducksoftware.com/api/vulnerabilities/cve/" + ID, Collections.emptyList());

    @Test
    public void testConstructor() {
        CveVulnerability cveVulnerability = new CveVulnerability(DESCRIPTION, PUBLISHED_DATE, LAST_MODIFIED_DATE, CVSS2_SCORE, CVSS3_SCORE, REFERENCES, STATUS,
                META);

        Assert.assertEquals(cveVulnerability.getDescription(), DESCRIPTION, "Descriptions should be equal.");
        Assert.assertNotNull(cveVulnerability.getPublishedDate(), "Published date should be initialized.");
        Assert.assertNotNull(cveVulnerability.getLastModifiedDate(), "Last modified date should be initialized.");
        Assert.assertEquals(cveVulnerability.getCvss2Score().orElse(null), CVSS2_SCORE, "CVSS2 scores should be equal.");
        Assert.assertEquals(cveVulnerability.getCvss3Score().orElse(null), CVSS3_SCORE, "CVSS3 scores should be equal.");
        Assert.assertEquals(cveVulnerability.getReferences(), REFERENCES, "References should be equal.");
        Assert.assertEquals(cveVulnerability.getStatus().orElse(null), STATUS, "Status should be equal.");
        Assert.assertEquals(cveVulnerability.getMeta(), META, "Metas should be equal.");

        Assert.assertEquals(cveVulnerability.getId(), ID, "Ids should be equal.");
    }

    @Test
    public void testDeserialization() throws JsonProcessingException {
        CveVulnerability cveVulnerability = new CveVulnerability(DESCRIPTION, PUBLISHED_DATE, LAST_MODIFIED_DATE, CVSS2_SCORE, CVSS3_SCORE, REFERENCES, STATUS,
                META);

        String json = serialize(cveVulnerability);
        CveVulnerability result = deserialize(json, CveVulnerability.class);

        Assert.assertEquals(result.getDescription(), DESCRIPTION, "Descriptions should be equal.");
        Assert.assertNotNull(result.getPublishedDate(), "Published date should be initialized.");
        Assert.assertNotNull(result.getLastModifiedDate(), "Last modified date should be initialized.");
        Assert.assertEquals(result.getCvss2Score().orElse(null), CVSS2_SCORE, "CVSS2 scores should be equal.");
        Assert.assertEquals(result.getCvss3Score().orElse(null), CVSS3_SCORE, "CVSS3 scores should be equal.");
        Assert.assertEquals(result.getReferences(), REFERENCES, "References should be equal.");
        Assert.assertEquals(result.getStatus().orElse(null), STATUS, "Status should be equal.");
        Assert.assertEquals(result.getMeta(), META, "Metas should be equal.");
    }
}
