/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.model;

import org.testng.Assert;
import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.synopsys.kb.httpclient.AbstractTest;

/**
 * Vulnerability reference test.
 * 
 * @author skatzman
 */
public class VulnerabilityReferenceTest extends AbstractTest {
    private static final String SOURCE = "EXPLOIT-DB";

    private static final String HREF = "http://www.exploit-db.com/exploits/35710";

    private static final String CONTENT = "35710";

    private static final String TYPE = "UNKNOWN";

    @Test
    public void testConstructor() {
        VulnerabilityReference vulnerabilityReference = new VulnerabilityReference(SOURCE, HREF, CONTENT, TYPE);

        Assert.assertEquals(vulnerabilityReference.getSource().orElse(null), SOURCE, "Sources should be equal.");
        Assert.assertEquals(vulnerabilityReference.getHref().orElse(null), HREF, "HREFs should be equal.");
        Assert.assertEquals(vulnerabilityReference.getContent().orElse(null), CONTENT, "Contents should be equal.");
        Assert.assertEquals(vulnerabilityReference.getType().orElse(null), TYPE, "Types should be equal.");
    }

    @Test
    public void testDeserialization() throws JsonProcessingException {
        VulnerabilityReference vulnerabilityReference = new VulnerabilityReference(SOURCE, HREF, CONTENT, TYPE);

        String json = serialize(vulnerabilityReference);
        VulnerabilityReference result = deserialize(json, VulnerabilityReference.class);

        Assert.assertEquals(result.getSource().orElse(null), SOURCE, "Sources should be equal.");
        Assert.assertEquals(result.getHref().orElse(null), HREF, "HREFs should be equal.");
        Assert.assertEquals(result.getContent().orElse(null), CONTENT, "Contents should be equal.");
        Assert.assertEquals(result.getType().orElse(null), TYPE, "Types should be equal.");
    }
}
