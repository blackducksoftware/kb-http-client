/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.kb.httpclient.model;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CVE vulnerability representation.
 * 
 * CVE vulnerabilities can contain meta links to other vulnerabilities. All of the following metadata links, when
 * present, are designed to be annotative rather than authoritative. The presence of a related 'bdsa' link does not
 * absolutely imply that the BDSA vulnerability is a soft duplicate of this CVE vulnerability.
 * - 0-to-many 'cve' relationship links to related CVEs.
 * - 0-to-many 'bdsa' relationship link to related BDSAs.
 * 
 * @author skatzman
 */
public class CveVulnerability extends SourcedVulnerability {
    @JsonCreator
    public CveVulnerability(@JsonProperty("description") String description,
            @JsonProperty("publishedDate") OffsetDateTime publishedDate,
            @JsonProperty("lastModifiedDate") OffsetDateTime lastModifiedDate,
            @JsonProperty("cvss2") Cvss2Score cvss2Score,
            @JsonProperty("cvss3") Cvss3Score cvss3Score,
            @JsonProperty("references") List<VulnerabilityReference> references,
            @JsonProperty("status") VulnerabilityStatus status,
            @JsonProperty("_meta") Meta meta) {
        super(description, publishedDate, lastModifiedDate, cvss2Score, cvss3Score, references, status, meta);
    }

    /**
     * Gets the id.
     *
     * @return UUID Returns the id.
     * @throws IllegalArgumentException
     *             Throws if the id is absent.
     */
    @Override
    @JsonIgnore
    public final String getId() {
        Meta meta = getMeta();

        return meta.getHrefId("cve").orElseThrow(() -> new IllegalArgumentException("Unable to get id because it is absent."));
    }

    @Override
    public int hashCode() {
        return Objects.hash(getDescription(), getPublishedDate(), getLastModifiedDate(), getCvss2Score(), getCvss3Score(), getReferences(), getStatus(),
                getMeta());
    }

    @Override
    public boolean equals(Object otherObject) {
        if (this == otherObject) {
            return true;
        } else if (otherObject instanceof CveVulnerability) {
            CveVulnerability otherCveVulnerability = (CveVulnerability) otherObject;

            return Objects.equals(getDescription(), otherCveVulnerability.getDescription())
                    && Objects.equals(getPublishedDate(), otherCveVulnerability.getPublishedDate())
                    && Objects.equals(getLastModifiedDate(), otherCveVulnerability.getLastModifiedDate())
                    && Objects.equals(getCvss2Score(), otherCveVulnerability.getCvss2Score())
                    && Objects.equals(getCvss3Score(), otherCveVulnerability.getCvss3Score())
                    && Objects.equals(getReferences(), otherCveVulnerability.getReferences())
                    && Objects.equals(getStatus(), otherCveVulnerability.getStatus())
                    && Objects.equals(getMeta(), otherCveVulnerability.getMeta());
        }

        return false;
    }
}
